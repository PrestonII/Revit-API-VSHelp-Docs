<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
<head>
<title>What's New</title>

<meta name="Microsoft.Help.Locale" content="en-us" />
<meta name="Microsoft.Help.TopicLocale" content="en-us" />
<meta name="Microsoft.Help.SelfBranded" content="true" />
<meta name="Microsoft.Help.Id" content="RevitAPI-2E450FFD-000002" />
<meta name="Microsoft.Help.TocParent" content="RevitAPI-2E450FFD-0057B7" />
<meta name="Microsoft.Help.TocOrder" content="1" />
<meta name="Microsoft.Help.Category" content="RevitAPI" />
<meta name="Microsoft.Help.DisplayVersion" content="" />


<style>

h1,h2,h3, h4
{
font-family:"Trebuchet MS",sans-serif;
color:#27f;
}

h2, h4
{
color:#000;
}


p, tr, td, span, div, li
{
font-family:sans-serif;
font-size:10pt;
}
</style>

<script type="text/javascript" src="h3m.js"></script>
</head>

<body>
<h1 style="color:#000";>Major changes and renovations to the Revit API</h1>
<hr />
<h1 id="RevitAPIChanges2018-APIchanges">API changes</h1><h2 id="RevitAPIChanges2018-APIenabledinperspectiveviews">API enabled in perspective views</h2><h3 id="RevitAPIChanges2018-Elementmodificationsandcontextualcommands">Element modifications and contextual commands</h3><p>Modification of many different object types is now allowed in perspective views. Most commands allowed in 3D orthographic views are now also allowed in perspective views. This includes contextual commands. Annotations are an exception and cannot be created in perspective views. </p><h3 id="RevitAPIChanges2018-Externalcommandsandapplications">External commands and applications</h3><p>External API commands and applications are now enabled by default in perspective views. The following behavior applies:</p><ul><li>Any external command that was automatically disabled by Revit when a perspective view is active will now be active.  No code changes are necessary to make this happen.</li><li>Any external command that was explicitly disabled in perspective views will remain disabled. For example, if your command has an accessibility function limiting it to use in certain view types, the command will not be accessible in perspective views unless that function accepts ViewType.ThreeD as a view type that is allowed. </li><li>Macros, the Macro Manager tools, Dynamo scripts and the Dynamo editor are also newly enabled when a perspective view is active.</li></ul><h2 id="RevitAPIChanges2018-Subelements">Subelements</h2><p>Several Revit elements can now contain a subdivision known as a Subelement.     Subelements provide a way for parts of an element to behave as though they were real elements without incurring the overhead of adding more full elements to the model.</p><p>Many Revit features – for example parameters, schedules, and tags – were designed to operate on Elements.  As a result, the Revit code needs to represent objects as Elements for them to participate in those features.  This can lead to scalability problems, because every Element adds overhead and adding many Elements may decrease the performance of the model.  </p><p>An alternative is to use Subelements.  An element can expose a set of &quot;Subelements&quot; that it contains, specifying characteristics like their category and parameters, and certain Revit capabilities will treat those Subelements the same as ordinary Elements.  For example, a Subelement may contribute geometry to the main element and may be able to be selected independently of its parent Element.  It will possibly have its own (settable) type as well as an assigned category which can be different from its parent Element.</p><p>In the API, the new Subelement class is used to refer to either an Element or a specific subelement of a given Element.    It is typically directly related to a Reference to either the Element or the specific subelement.</p><p>Note that creation of new Subelements for a given element is not done generically.  Instead, the given Element may provide the ability to modify its definition, resulting in the creation of new Subelements.</p><p>Examples of Elements which may incorporate Subelements in practice include:</p><ul><li>Rebar</li><li>RebarContainer</li><li>FabricSheet</li><li>Stairs elements which make up MultistoryStairs elements</li><li>Railing</li><li>ContinuousRail</li></ul><p>To get access to a particular Subelement, you may use any of the following:</p><ul><li>Subelement.Create()</li><li>Subelement.IsValidSubelementReference()</li><li>Document.GetSubelement(Reference) - Gets the subelement referenced by the input reference.</li><li>Document.GetSubelement(String uniqueId) - Gets the subelement referenced by a unique id string.</li><li>Element.GetSubelements() - Returns the collection of the Element's Subelements.</li></ul><p>To access the basic Subelement properties, including its category and geometry, use:</p><ul><li>Subelement.GetBoundingBox()</li><li>Subelement.GetGeometryObject()</li><li>Subelement.IsModifiable()</li><li>Subelement.Document</li><li>Subelement.Element</li><li>Subelement.Category</li><li>Subelement.GetReference()</li><li>Subelement.UniqueId</li><li>ExportUtils.GetExportId(Subelement)</li></ul><p>To access the Subelement's type, use:</p><ul><li>Subelement.TypeId</li><li>Subelement.ChangeTypeId()</li><li>Subelement.GetValidTypes()</li><li>Subelement.IsValidType()</li><li>Subelement.CanHaveTypeAssigned()</li></ul><p>To access the Subelement's parameters, use:</p><ul><li>Subelement.GetAllParameters()</li><li>Subelement.GetParameterValue()</li><li>Subelement.SetParameterValue()</li><li>Subelement.IsParameterModifiable()</li><li>Subelement.HasParameter()</li></ul><p>For Elements which allow deletion of individual Subelements, use:</p><ul><li>Element.DeleteSubelement() </li><li>Element.DeleteSubelements()</li><li>Element.CanDeleteSubelement()</li></ul><h3 id="RevitAPIChanges2018-Referencesandselectionofsubelements">References and selection of subelements</h3><p>The new enumerated value:</p><ul class="alternate"><li>ObjectType.Subelement</li></ul><p>provides the ability to prompt a user to select subelements interactively using Selection.PickObject() or Selection.PickObjects().</p><p>The new enumerated value:</p><ul class="alternate"><li>ElementReferenceType.REFERENCE_TYPE_SUBELEMENT</li></ul><p>identify a reference as a reference to a specific subelement.</p><p>The new methods:</p><ul><li>Reference.EqualTo()</li><li>Reference.Contains()</li></ul><p>provide useful checks related to the contents of a given Reference object, applicable to subelement references as well as other types of references.</p><h2 id="RevitAPIChanges2018-ChangestoAPIsforaccessingversion">Changes to APIs for accessing version</h2><p> The property:</p><ul><li>Application.IsSubscriptionUpdate</li></ul><p>has been deprecated and replaced by:</p><ul><li>Application.SubVersionNumber</li></ul><p>The new property returns a string representing the major-minor version number for the Revit application. For example, &quot;2018.0.0&quot;.  This number is updated for major and minor updates. </p><p>In RevitAddinUtility, the similar property:</p><ul><li>RevitProduct.IsSubscriptionUpdate</li></ul><p>has been deprecated and replaced by:</p><ul><li>RevitProduct.ReleaseSubVersion </li></ul><p>This new string property returns a similar major-minor version number for installed Revit versions.</p><h2 id="RevitAPIChanges2018-AssetAPIChanges">Asset API Changes</h2><p>The following API classes moved from the Autodesk.Revit.Utility namespace to a new namespace Autodesk.Revit.DB.Visual:</p><ul><li>AssetProperty</li><li>AssetProperties</li><li>Asset</li><li>AssetSet</li><li>AssetType</li><li>AssetPropertyType</li><li>AssetPropertyDouble</li><li>AssetPropertyDoubleArray2d</li><li>AssetPropertyDoubleArray3d</li><li>AssetPropertyDoubleArray4d</li><li>AssetPropertyDoubleMatrix44</li><li>AssetPropertyFloat</li><li>AssetPropertyFloatArray</li><li>AssetPropertyInt64</li><li>AssetPropertyUInt64</li><li>AssetPropertyBoolean</li><li>AssetPropertyDistance</li><li>AssetPropertyEnum</li><li>AssetPropertyReference</li><li>AssetPropertyString</li><li>AssetPropertyTime</li><li>AssetPropertyList</li></ul><p> </p><p>Two AssetProperty properties were deprecated and replaced:</p><div class="table-wrap"><table class="wrapped confluenceTable"><tbody><tr><th class="confluenceTh">Deprecated</th><th class="confluenceTh">Replacement (new methods)</th></tr><tr><td class="confluenceTd"><p>AssetPropertyDouble3.Value</p></td><td class="confluenceTd"><p>IList&lt;double&gt; APropertyDouble3::GetValueAsDoubles()</p><p>XYZ APropertyDouble3::GetValueAsXYZ()</p></td></tr><tr><td class="confluenceTd"><p>AssetPropertyDouble4.Value</p></td><td class="confluenceTd">IList&lt;double&gt; APropertyDouble4::GetValueAsDoubles()</td></tr></tbody></table></div><p> </p><p>Values for the enumerated type AssetPropertyType were renamed to better adhere to the API standards. Note that corresponding integer values are the same:</p><p> </p><div class="table-wrap"><table class="wrapped confluenceTable"><colgroup><col/><col/><col/></colgroup><tbody><tr><th class="confluenceTh">Old values</th><th class="confluenceTh">Replacement</th><th colspan="1" class="confluenceTh">Integer value </th></tr><tr><td class="confluenceTd"><p>APT_Unknown</p></td><td class="confluenceTd"><p>Unknown</p></td><td colspan="1" class="confluenceTd"> 0</td></tr><tr><td class="confluenceTd"><p>APT_Properties</p></td><td class="confluenceTd">Properties</td><td colspan="1" class="confluenceTd"> 1</td></tr><tr><td colspan="1" class="confluenceTd">APT_Boolean </td><td colspan="1" class="confluenceTd">Boolean  </td><td colspan="1" class="confluenceTd"> 2</td></tr><tr><td colspan="1" class="confluenceTd">APT_Enum </td><td colspan="1" class="confluenceTd">Enumeration  </td><td colspan="1" class="confluenceTd"> 3</td></tr><tr><td colspan="1" class="confluenceTd">APT_Integer </td><td colspan="1" class="confluenceTd">Integer  </td><td colspan="1" class="confluenceTd"> 4</td></tr><tr><td colspan="1" class="confluenceTd">APT_Float </td><td colspan="1" class="confluenceTd">Float  </td><td colspan="1" class="confluenceTd"> 5</td></tr><tr><td colspan="1" class="confluenceTd">APT_Double </td><td colspan="1" class="confluenceTd">Double1  </td><td colspan="1" class="confluenceTd"> 6</td></tr><tr><td colspan="1" class="confluenceTd">APT_DoubleArray2d </td><td colspan="1" class="confluenceTd">Double2 </td><td colspan="1" class="confluenceTd"> 7</td></tr><tr><td colspan="1" class="confluenceTd">APT_DoubleArray3d </td><td colspan="1" class="confluenceTd">Double3 </td><td colspan="1" class="confluenceTd"> 8</td></tr><tr><td colspan="1" class="confluenceTd">APT_DoubleArray4d </td><td colspan="1" class="confluenceTd">Double4 </td><td colspan="1" class="confluenceTd"> 9</td></tr><tr><td colspan="1" class="confluenceTd">APT_Double44 </td><td colspan="1" class="confluenceTd">Double44 </td><td colspan="1" class="confluenceTd"> 10</td></tr><tr><td colspan="1" class="confluenceTd">APT_String </td><td colspan="1" class="confluenceTd">String </td><td colspan="1" class="confluenceTd"> 11</td></tr><tr><td colspan="1" class="confluenceTd">APT_Time </td><td colspan="1" class="confluenceTd">Time </td><td colspan="1" class="confluenceTd"> 12</td></tr><tr><td colspan="1" class="confluenceTd">APT_Distance </td><td colspan="1" class="confluenceTd">Distance</td><td colspan="1" class="confluenceTd"> 14</td></tr><tr><td colspan="1" class="confluenceTd">APT_Asset </td><td colspan="1" class="confluenceTd">Asset  </td><td colspan="1" class="confluenceTd"> 15</td></tr><tr><td colspan="1" class="confluenceTd">APT_Reference </td><td colspan="1" class="confluenceTd">Reference  </td><td colspan="1" class="confluenceTd"> 16</td></tr><tr><td colspan="1" class="confluenceTd">APT_Int64 </td><td colspan="1" class="confluenceTd">Longlong  </td><td colspan="1" class="confluenceTd"> 17</td></tr><tr><td colspan="1" class="confluenceTd">APT_UInt64 </td><td colspan="1" class="confluenceTd">ULonglong  </td><td colspan="1" class="confluenceTd"> 18</td></tr><tr><td colspan="1" class="confluenceTd">APT_List </td><td colspan="1" class="confluenceTd">List  </td><td colspan="1" class="confluenceTd"> 19</td></tr><tr><td colspan="1" class="confluenceTd">APT_FloatArray </td><td colspan="1" class="confluenceTd">Float3  </td><td colspan="1" class="confluenceTd"> 20</td></tr></tbody></table></div><h2 id="RevitAPIChanges2018-DynamicUpdatersonReloadLatest">Dynamic Updaters on Reload Latest</h2><p>Dynamic updaters are now triggered on Reload Latest for the elements added or changed in the central file.</p><h2 id="RevitAPIChanges2018-ExporttoDWG/DXFAPIchange">Export to DWG/DXF API change</h2><p>The new AutoCAD version (R2018) has been added to the ACADVersion enumerated type.  This is now the default version used when exporting to DWG and DXF.  </p><h2 id="RevitAPIChanges2018-UIDocument.PromptForFamilyInstancePlacement()behavioralchange">UIDocument.PromptForFamilyInstancePlacement() behavioral change</h2><p>The behavior for UIDocument.PromptForFamilyInstancePlacement() was changed to be same as that of PickObject() methods - the placement operation will be cancelled when the &quot;x&quot; button of Revit is clicked during the placement operation instead of closing Revit directly.</p><h2 id="RevitAPIChanges2018-IndependentTagAPIchanges">IndependentTag API changes</h2><p>The new method:</p><ul><li>IndependentTag.Create()</li></ul><p>replaces Autodesk.Revit.Creation.Document.NewTag(), which has been marked obsolete.  The new version supports tagging of either elements or subelements.</p><p>The new method:</p><ul><li>IndependentTag.GetTaggedReference()</li></ul><p>returns a reference to the item which has been tagged.  This reference may be to a Subelement, which can also be identified by:</p><ul><li> IndependentTag.IsTaggedOnSubelement()</li></ul><p>The following properties and their methods now throw more informative exceptions:</p><ul><li>IndependentTag.LeaderElbow:<br/><ul><li>IndependentTag.GetLeaderElbow() - &quot;The tag does not have a leader or its leader is straight.&quot;</li><li>IndependentTag.SetLeaderElbow() - &quot;The tag does not have a leader.&quot;</li></ul></li><li>IndependentTag.LeaderEnd:<ul><li>IndependentTag.GetLeaderEnd() - &quot;There is no leader end because the tag does not use a free end leader.&quot;</li><li>IndependentTag.SetLeaderEnd() - &quot;There is no leader end because the tag does not use a free end leader.&quot;</li></ul></li></ul><p>The new property:</p><ul><li>IndependentTag.HasElbow</li></ul><p>indicates if the leader of the tag has an elbow point or not.</p><h2 id="RevitAPIChanges2018-SharedCoordinatesAPIchanges">Shared Coordinates API changes</h2><p>The following properties have been deprecated and replaced:</p><div class="table-wrap"><table class="wrapped confluenceTable"><tbody><tr><th class="confluenceTh">Deprecated member</th><th class="confluenceTh">New/replacement member</th></tr><tr><td class="confluenceTd">ProjectLocation.ProjectPosition</td><td class="confluenceTd"><p>ProjectLocation.GetProjectPosition()</p><p>ProjectLocation.SetProjectPosition()</p></td></tr><tr><td colspan="1" class="confluenceTd">ProjectLocation.SiteLocation</td><td colspan="1" class="confluenceTd">ProjectLocation.GetSiteLocation()</td></tr></tbody></table></div><p> </p><h2 id="RevitAPIChanges2018-NewDirectShapebehaviors">New DirectShape behaviors</h2><p>DirectShape elements now support new behaviors.  Other than the limitations listed below, no code changes are required to enable these new behaviors for DirectShape elements.</p><ul class="ul"><li class="li">Mirroring - the DirectShape element should now support mirror operations correctly.</li><li class="li">Tagging - if the element's assigned category supports tagging and a tag type exists, the DirectShape can be tagged with Revit tagging tools.   </li><li class="li">Edge dimensions - if the DirectShape is referenceable, it will now support dimensioning to edge references as well as face references.</li><li class="li">Connector elements - in families, if the DirectShape is referenceable, DirectShape planar faces can be used to host connector elements.</li><li class="li">Rebar hosting - if the DirectShape is of any of the following categories it can now act as a host for rebar:<ul class="ul"><li class="li">OST_StructuralFraming</li><li class="li">OST_StructuralColumns</li><li class="li">OST_StructuralFoundation</li><li class="li">OST_StructuralConnections</li><li class="li">OST_Walls</li><li class="li">OST_Floors</li><li class="li">OST_EdgeSlab</li><li class="li">OST_Parts</li><li class="li">OST_Stairs</li><li class="li">OST_GenericModels</li></ul></li></ul><h2 id="RevitAPIChanges2018-RebarAPIChanges">Rebar API Changes</h2><p>Rebar now supports two different layout options: shape-driven and free-form.  Previously, all Rebar elements were shape-driven.  The new methods:</p><ul><li>Rebar.GetShapeDrivenAccessor() - Returns the Shape Driven interface which exposes specific Shape Driven logic.</li><li>Rebar.GetFreeFormAccessor() - Returns the Free Form interface which exposes specific Free Form logic.</li><li>Rebar.IsRebarFreeForm - Returns true if the rebar is free form and false if shape driven.</li><li>Rebar.IsRebarShapeDriven - Returns true if the rebar is shape driven and false if free form.</li></ul><p>Rebar members which are applicable only for shape-driven rebar have been deprecated and replaced with equivalents in the class RebarShapeDrivenAccessor.   Specifically, the following members are deprecated:</p><div class="table-wrap"><table class="wrapped confluenceTable"><tbody><tr><th class="confluenceTh">Deprecated member</th><th class="confluenceTh">Replacement method</th></tr><tr><td class="confluenceTd"><p>Rebar.GetDistributionPath()</p></td><td class="confluenceTd">RebarShapeDrivenAccessor.GetDistributionPath()</td></tr><tr><td class="confluenceTd"><p>Rebar.ComputeDrivingCurves()</p></td><td class="confluenceTd">RebarShapeDrivenAccessor.ComputeDrivingCurves()</td></tr><tr><td colspan="1" class="confluenceTd">Rebar.GetBarPositionTransform()</td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.GetBarPositionTransform()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.ScaleToBox()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.ScaleToBox()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.ScaleToBoxFor3D()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.ScaleToBoxFor3D()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.SetLayoutAsSingle()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.SetLayoutAsSingle()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.SetLayoutAsFixedNumber()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.SetLayoutAsFixedNumber()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.SetLayoutAsMaximumSpacing()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.SetLayoutAsMaximumSpacing()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.SetLayoutAsNumberWithSpacing()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.SetLayoutAsNumberWithSpacing ()</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.SetLayoutAsMinimumClearSpacing()</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.SetLayoutAsMinimumClearSpacing()</td></tr><tr><td colspan="1" class="confluenceTd">Rebar.Normal</td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.Normal</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.BarsOnNormalSide</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.BarsOnNormalSide</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.Height</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.Height</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.ArrayLength</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.ArrayLength</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.BaseFinishingTurns</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.BaseFinishingTurns</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.MultiplanarDepth</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.MultiplanarDepth</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.TopFinishingTurns</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.TopFinishingTurns</td></tr><tr><td colspan="1" class="confluenceTd"><p>Rebar.Pitch</p></td><td colspan="1" class="confluenceTd">RebarShapeDrivenAccessor.Pitch</td></tr><tr><td colspan="1" class="confluenceTd">Rebar.RebarShapeId</td><td colspan="1" class="confluenceTd"><p>getter - Rebar.GetShapeId()<br/>setter - RebarShapeDrivenAccessor.SetRebarShapeId()</p></td></tr></tbody></table></div><h2 id="RevitAPIChanges2018-FabricSheetAPIChanges">FabricSheet API Changes</h2><p>The following methods have been deprecated and replaced:</p><div class="table-wrap"><table class="wrapped confluenceTable"><tbody><tr><th class="confluenceTh">Deprecated method</th><th class="confluenceTh">Replacement method</th><th colspan="1" class="confluenceTh">Notes</th></tr><tr><td class="confluenceTd"><p>FabricSheetType.SetLayoutAsCustomPattern(double, double , double , double , IList&lt;FabricWireItem&gt; , IList&lt;FabricWireItem&gt;)</p></td><td class="confluenceTd">FabricSheetType.SetLayoutAsCustomPattern(double, double , IList&lt;FabricWireItem&gt; , IList&lt;FabricWireItem&gt;)</td><td colspan="1" class="confluenceTd">Both end overhangs will now be read only and computed internally.</td></tr><tr><td class="confluenceTd"><p>FabricWireItem.Create(double distance, double wireLength, ElementId wireType)</p></td><td class="confluenceTd">FabricWireItem.Create(double distance, double wireLength, ElementId wireType, double wireOffset)</td><td colspan="1" class="confluenceTd">Older calls can use the new method with wireOffset set to 0.0.</td></tr></tbody></table></div><h2 id="RevitAPIChanges2018-StructuralSectionAPIChanges"><br/>Structural Section API Changes</h2><p>Several section properties were moved from subclasses to the base class StructuralSection:</p><ul><li>StructuralSection.ElasticModulusStrongAxis</li><li>StructuralSection.ElasticModulusWeakAxis</li><li>StructuralSection.MomentOfInertiaStrongAxis</li><li>StructuralSection.MomentOfInertiaWeakAxis</li><li>StructuralSection.NominalWeight</li><li>StructuralSection.Perimeter</li><li>StructuralSection.PlasticModulusStrongAxis</li><li>StructuralSection.PlasticModulusWeakAxis</li><li>StructuralSection.PrincipalAxesAngle</li><li>StructuralSection.SectionArea</li><li>StructuralSection.ShearAreaStrongAxis</li><li>StructuralSection.ShearAreaWeakAxis</li><li>StructuralSection.TorsionalModulus</li><li>StructuralSection.TorsionalMomentOfInertia</li><li>StructuralSection.WarpingConstant</li></ul><p>Several specific structural sections offer new constructors with additional input parameters.  Their original constructors have been deprecated.</p><ul><li>StructuralSectionCSlopedFlange</li><li>StructuralSectionISlopedFlange</li><li>StructuralSectionISplitSlopedFlange</li><li>StructuralSectionLAngle</li><li>StructuralSectionStructuralTees</li></ul><p>Several new specific structural section classes have been introduced:</p><ul><li>StructuralSectionGeneralC - Defines parameters for Channel Cold Formed shape.</li><li>StructuralSectionGeneralCEx - Defines parameters for Channel with Fold Cold Formed shape.</li><li>StructuralSectionGeneralF - Defines parameters for Flat Bar.</li><li>StructuralSectionGeneralH - Defines parameters for Rectangular Pipe structural section.</li><li>StructuralSectionGeneralI - Defines parameters for general Double T shape.</li><li>StructuralSectionGeneralLA - Defines parameters for Angle Cold Formed structural section.</li><li>StructuralSectionGeneralLZ - Defines parameters for Z Cold Formed shape.</li><li>StructuralSectionGeneralR - Defines parameters for pipes.</li><li>StructuralSectionGeneralS - Defines parameters for Round Bar structural section.</li><li>StructuralSectionGeneralT - Defines parameters for Tees shape.</li><li>StructuralSectionGeneralU - Defines parameters for general Channel shape.</li><li>StructuralSectionGeneralW - Defines parameters for Angle structural section.</li></ul><p>In addition, the API for structural sections offers a few other new capabilities:</p><ul><li>StructuralSection.GetBoundarySize() - returns the size of the section boundary.</li><li>StructuralSection.AnalysisParams - accesses a common set of parameters for structural analysis which can be associated to a section.</li><li>StructuralSection.StructuralSectionGeneralShape - returns an enumerated value identifying the general shape for the structural section representing geometry only.</li><li>StructuralSectionHotRolled.FlangeThicknessLocation - this new property has been introduced for this class and the specific sections that derive from it.</li><li>StructuralSectionHotRolled.WebThicknessLocation - this new property has been introduced for this class and the specific sections that derive from it.</li><li>StructuralSectionUtils.GetStructuralElementDefinitionData() - returns data defining the section and the position of the structural element.</li></ul><h2 id="RevitAPIChanges2018-ElectricalSystemAPIchanges">ElectricalSystem API changes</h2><p>The following functions have been deprecated and replaced:</p><div class="table-wrap"><table class="wrapped confluenceTable"><tbody><tr><th class="confluenceTh">Deprecated member</th><th class="confluenceTh">New/replacement member</th></tr><tr><td class="confluenceTd"><p>Autodesk.Revit.Creation.Document.NewElectricalSystem(Connector, ElectricalSystemType)</p></td><td class="confluenceTd">ElectricalSystem.Create(Connector, ElectricalSystemType)</td></tr><tr><td class="confluenceTd">Autodesk.Revit.Creation.Document.NewElectricalSystem(ICollection<span class="languageSpecificText"> <span class="cs">&lt;</span> </span>ElementId<span class="languageSpecificText"> <span class="fs">&gt;</span> </span>, ElectricalSystemType)</td><td class="confluenceTd">ElectricalSystem.Create(Document, IList<span class="languageSpecificText">&lt;</span>ElementId<span class="languageSpecificText">&gt;</span>, ElectricalSystemType)</td></tr></tbody></table></div><h2 id="RevitAPIChanges2018-PipePressureLossCalculationchange"><br/>Pipe Pressure Loss Calculation change</h2><p>The methods:</p><ul><li>Autodesk.Revit.DB.Plumbing.PipeSettings.GetPressLossCalculationServerInfo()</li><li>Autodesk.Revit.DB.Plumbing.PipeSettings.SetPressLossCalculationServerInfo()</li></ul><p>have been deprecated in Revit 2018 and will be removed in the next version of Revit. Custom pipe pressure loss calculations will no longer be supported. Similar functionality can be accessed by setting Autodesk.Revit.DB.Plumbing.PipeSettings.AnalysisForClosedLoopHydronicPipingNetworks.</p><h2 id="RevitAPIChanges2018-CorrectednamesofAutoRouteFailuresvalues">Corrected names of AutoRouteFailures values</h2><p>The following BuiltInFailures.AutoRouteFailures values were renamed due to spelling errors:</p><ul><li>AttemptToConnectNonSlopingElementToSlopedPipeWarning (renamed from AttemptToComnnectNonSlopingElementToSlopedPipeWarning)</li><li>AttemptToConnectNonSlopingElementToSlopedPipeError (renamed from AttemptToComnnectNonSlopingElementToSlopedPipeError)</li></ul><h2 id="RevitAPIChanges2018-RevitLinkLoadResultrename">RevitLinkLoadResult rename</h2><p>The class RevitLinkLoadResult has been renamed to LinkLoadResult. Note that applications referring to RevitLinkLoadResult will need to be recompiled using the new name. The class is otherwise unchanged. The new CADLinkType reload and creation functions will return a LinkLoadResult object.</p><h2 id="RevitAPIChanges2018-ObsoleteAPIremoval">Obsolete API removal</h2><p>The following API members and classes which had previously been marked Obsolete have been removed in this release.  Consult the API documentation from prior releases for information on the replacements to use:</p><h4 id="RevitAPIChanges2018-Classes">Classes</h4><ul><li>Autodesk.Revit.DB.Plumbing.PipeType</li><li>Autodesk.Revit.DB.Structure.FabricSheet.BentFabricWiresOrientation</li><li>Autodesk.Revit.DB.Structure.BentFabricWiresOrientation</li><li>Autodesk.Revit.DB.FormattedTextRun</li><li>Autodesk.Revit.DB.FormatUtils</li><li>Autodesk.Revit.DB.PropertySetLibrary</li></ul><h4 id="RevitAPIChanges2018-Methods">Methods</h4><ul><li>Autodesk.Revit.DB.NurbSpline.Create(IList&lt;XYZ&gt;, IList&lt;Double&gt;) : NurbSpline</li><li>Autodesk.Revit.DB.NurbSpline.Create(IList&lt;XYZ&gt;, IList&lt;Double&gt;, IList&lt;Double&gt;, Int32, Boolean, Boolean) : NurbSpline</li><li>Autodesk.Revit.Creation.Application.NewPlane(CurveArray) : Plane</li><li>Autodesk.Revit.Creation.Application.NewPlane(XYZ, XYZ) : Plane</li><li>Autodesk.Revit.Creation.Application.NewPlane(XYZ, XYZ, XYZ) : Plane</li><li>Autodesk.Revit.CurveAPIUtils.CreateNurbSpline(IList&lt;XYZ&gt;, IList&lt;Double&gt;) : NurbSpline</li><li>Autodesk.Revit.CurveAPIUtils.CreateNurbSpline(IList&lt;XYZ&gt;, IList&lt;Double&gt;, IList&lt;Double&gt;, Int32, Boolean, Boolean) : NurbSpline</li><li>Autodesk.Revit.Creation.Document.NewDuct(Connector, Connector, DuctType) : Duct</li><li>Autodesk.Revit.Creation.Document.NewDuct(XYZ, Connector, DuctType) : Duct</li><li>Autodesk.Revit.Creation.Document.NewDuct(XYZ, XYZ, DuctType) : Duct</li><li>Autodesk.Revit.DB.Structure.LoadCase.Create(Document, String, ElementId, LoadNatureCategory) : LoadCase</li><li>Autodesk.Revit.DB.WallFoundation.GetFoundationType() : WallFoundationType</li><li>Autodesk.Revit.DB.WallFoundation.SetFoundationType(WallFoundationType) : Void</li><li>Autodesk.Revit.DB.ViewSchedule.GroupHeaders(Int32, Int32, Int32, Int32) : Void</li><li>Autodesk.Revit.DB.PointClouds.PointCloudOverrides.GetPointCloudOverrideSettings(ElementId, String, Document) : PointCloudOverrideSettings</li><li>Autodesk.Revit.DB.PointClouds.PointCloudOverrides.GetPointCloudOverrideSettings(ElementId) : PointCloudOverrideSettings</li><li>Autodesk.Revit.DB.PointClouds.PointCloudOverrides.SetPointCloudOverrideSettings(ElementId, PointCloudOverrideSettings, String, Document) : Void</li><li>Autodesk.Revit.DB.PointClouds.PointCloudOverrides.SetPointCloudOverrideSettings(ElementId, PointCloudOverrideSettings) : Void</li><li>Autodesk.Revit.DB.DirectShape.CreateElement(Document, ElementId, String, String) : DirectShape</li><li>Autodesk.Revit.DB.DirectShape.CreateElementInstance(Document, ElementId, ElementId, String, Transform, String, String) : DirectShape</li><li>Autodesk.Revit.DB.DirectShape.SetGUIDs(String, String) : Void</li><li>Autodesk.Revit.DB.TextNode.GetFormattedTextRuns() : IList&lt;FormattedTextRun&gt;</li><li>Autodesk.Revit.DB.View.GetVisibility(Category) : Boolean</li><li>Autodesk.Revit.DB.View.SetVisibility(Category, Boolean) : Void</li><li>Autodesk.Revit.Creation.Document.NewFoundationWall(WallFoundationType, Wall) : WallFoundation</li><li>Autodesk.Revit.DB.Ellipse.Create(XYZ, double, double, XYZ, XYZ, double, double) : Ellipse</li></ul><h4 id="RevitAPIChanges2018-Properties">Properties</h4><ul><li>Autodesk.Revit.DB.Structure.LoadCase.NatureCategory : LoadNatureCategory</li><li>Autodesk.Revit.DB.Mechanical.MechanicalSystem.Flow : Double</li><li>Autodesk.Revit.DB.Mechanical.MechanicalSystem.StaticPressure : Double</li><li>Autodesk.Revit.DB.Plumbing.PipingSystem.FixtureUnits : Double</li><li>Autodesk.Revit.DB.Plumbing.PipingSystem.Flow : Double</li><li>Autodesk.Revit.DB.Plumbing.PipingSystem.StaticPressure : Double</li><li>Autodesk.Revit.DB.ScheduleField.HasTotals : Boolean</li><li>Autodesk.Revit.DB.Events.DocumentPrintingEventArgs.Settings : IPrintSetting</li><li>Autodesk.Revit.DB.Events.ViewPrintingEventArgs.Settings : IPrintSetting</li><li>Autodesk.Revit.DB.Mechanical.DuctFittingAndAccessoryConnectorData.Coordination : Transform</li><li>Autodesk.Revit.DB.Plumbing.PipeFittingAndAccessoryConnectorData.Coordination : Transform</li><li>Autodesk.Revit.UI.Events.DialogBoxShowingEventArgs.HelpId : Int32</li></ul><h4 id="RevitAPIChanges2018-Enumeratedtypes">Enumerated types</h4><ul><li>Autodesk.Revit.DB.Structure.LoadNatureCategory</li><li>Autodesk.Revit.Attributes.TransactionMode.Automatic</li></ul><p> </p><h1 id="RevitAPIChanges2018-APIadditions">API additions</h1><h2 id="RevitAPIChanges2018-APItogetlistofreviewablewarningsfromaDocument">API to get list of reviewable warnings from a Document</h2><p>The new method:</p><ul><li>Document.GetWarnings()</li></ul><p><span style="color: rgb(0,0,0);">returns a list of failure messages generated from persistent (reviewable) warnings accumulated in the document.</span></p><h2 id="RevitAPIChanges2018-APIaccesstoFamilyInstancereferences">API access to FamilyInstance references</h2><p>The following new methods have been added to enable easy access to FamilyInstance references that correspond to reference planes and reference lines in the family.  Some use the options in the new enumeration FamilyInstanceReferenceType as input to identify &quot;Strong&quot; or &quot;Weak&quot; references or specific positional references in each of the 3 coordinate directions (as determined by the possible values of parameter &quot;Is Reference&quot; of reference planes and parameter &quot;Reference&quot; of reference lines in families).</p><ul><li>FamilyInstance.GetReferences()</li><li>FamilyInstance.GetReferenceByName()</li><li>FamilyInstance.GetReferenceType()</li><li>FamilyInstance.GetReferenceName()</li></ul><h2 id="RevitAPIChanges2018-MultistoryStairsAPI">Multistory Stairs API</h2><p>The new class:</p><ul><li>MultistoryStairs</li></ul><p>allows users to create stairs that span multiple levels.  A multistory stairs element may contain multiple stairs whose extents are governed by base and top levels.</p><p>This element will contain one or more Stairs elements. Stairs elements are either a reference instance which is copied to each level covered by groups of identical stairs instances which share the same level height, or individual Stairs instances which are not connected to a group with the same level height. By default, when adding new levels to the multistory stair, new stairs will be added to the group.</p><p>For groups of duplicate stairs at different levels, the instances can be found as Subelements of the Stairs element.</p><p>Stairs in a connected group can be edited together by modifying the associated Stairs instance. For specific floors that need special designs, stairs can be separated from a group by unpinning the element, changes made to this Stairs will not affect other any other instance in the element, or add the stairs back into the group if needed. However, any changes made to the stair will be lost since the stair's properties will be overridden by the group specifications.</p><p>The class has the following methods:</p><ul><li>MultistoryStairs.AddStairsByLevelIds() - Adds stairs to the given levels.</li><li>MultistoryStairs.RemoveStairsByLevelIds() - Removes stairs from the given levels. This will regenerate the multistory stairs from the remaining levels.</li><li>MultistoryStairs.CanAddStair() - Checks if the input level id can be used to add stairs into multistory stairs.</li><li>MultistoryStairs.CanRemoveStair() - Checks if the input level id can be used to remove stairs from the multistory stairs.</li><li>MultistoryStairs.GetAllConnectedLevels() - Gets the ids of all levels connected to the multistory stairs.</li><li>MultistoryStairs.GetAllStairsIds() - Gets the ids of all of the stairs in the multistory stairs.</li><li>MultistoryStairs.Create() - Creates a multistory stairs object.</li><li>MultistoryStairs.GetStairsConnectedBaseLevelIds() - Gets the base level ids for the stairs contained in this multi-story stairs element.</li><li>MultistoryStairs.IsPinned() - Checks if a stair is pinned as a propagation group.</li><li>MultistoryStairs.Unpin() - Unpins a story of stairs by giving its base level id.</li><li>MultistoryStairs.Pin() - Pins a unpinned stairs back into a story of a stairs.</li></ul><p>The new property:</p><p>   Stairs.MultistoryStairsId</p><p>indicates the id of the MultistoryStairs element to which the Stairs belong to.</p><p>Related to StairsPath functionality for multistory stairs, the new functions:</p><ul><li>StairsPath.CanCreateOnMultistoryStairs()</li><li>StairsPath.CreateOnMultistoryStairs() </li></ul><p>support creation of new stairs paths in a plan view for stairs instances in a multistory stairs element.</p><h3 id="RevitAPIChanges2018-RailingsAPIadditionsrelatedtoMultistoryStairs">Railings API additions related to MultistoryStairs</h3><p>The new methods:</p><ul><li>Railing.GetMultistoryStairsPlacementLevels()</li><li>Railing.SetMultistoryStairsPlacementLevels()</li><li>Railing.GetSubelementOnLevel() </li></ul><p>provide access to Railing elements which are hosted on members of Multistory stairs.  </p><p>The method:</p><ul><li>Railing.Create(Document document, ElementId multistoryStairsId, ElementId levelId,  ElementId railingTypeId,  RailingPlacementPosition placePosition)</li></ul><p>Creates new railings on a given level of given multistory stairs - the created railing will be hosted on stairs included in MultistoryStairs element on given level.  </p><p>The existing method:</p><ul><li>Railing.Create(Document document, ElementId stairsId,  ElementId railingTypeId,  RailingPlacementPosition placePosition)</li></ul><p>now supports MulitstoryStairs elements as input, where the resulting railing will be added on every level of given stairs in multistory stairs.</p><p>The existing property:</p><ul><li>Railing.HostId</li></ul><p>now supports stairs or stairs components coming from MultistoryStairs elements as well. </p><h2 id="RevitAPIChanges2018-DimensionAPIadditions">Dimension API additions</h2><h3 id="RevitAPIChanges2018-DimensionEqualityLabelFormatingAPI">DimensionEqualityLabelFormating API</h3><p>The new class:</p><ul><li>DimensionEqualityLabelFormatting</li></ul><p>allows users to set dimension equality formulas for continuous linear or angular dimensions.</p><p>New methods and properties include:</p><ul><li>DimensionEqualityLabelFormatting.LeadingSpaces</li><li>DimensionEqualityLabelFormatting.LabelType</li><li>DimensionEqualityLabelFormatting.Prefix</li><li>DimensionEqualityLabelFormatting.Suffix</li><li>DimensionEqualityLabelFormatting.GetFormatOptions()</li><li>DimensionEqualityLabelFormatting.SetFormatOptions()</li></ul><p>The following new methods in DimensionType allow access to equality formulas:</p><ul><li>DimensionType.GetEqualityFormula()</li><li>DimensionType.SetEqualityFormula()</li></ul><h3 id="RevitAPIChanges2018-UnitsFormatOptionsinDimensionType">UnitsFormatOptions in DimensionType</h3><p>The new functions:</p><ul><li>DimensionType.GetUnitsFormatOptions()</li><li>DimensionType.SetUnitsFormatOptions()</li></ul><p>allow users to get or set the FormatOptions for a DimensionType.</p><h3 id="RevitAPIChanges2018-OrdinateDimensionSetting">OrdinateDimensionSetting</h3><p>The new class:</p><ul><li>OrdinateDimensionSetting</li></ul><p>allows users to customize ordinate dimensions.</p><p>The new enum:</p><ul><li>OrdinateDimensionLineStyle</li></ul><p>allows users to choose continuous or segmented line styles for their dimensions.</p><p>The new enums:</p><ul><li>OrdinateTextOrientation</li><li>OrdinateTextPosition</li></ul><p>allows users to orient text in relation to the dimension lines or witness lines.</p><p>The new enum:</p><ul><li>OrdinateOriginVisibility</li></ul><p>allows users to control visibility of their dimensions.</p><p>New properties in OrdinateDimensionSetting include:</p><ul><li>OrdinateDimensionSetting.DimLineLength</li><li>OrdinateDimensionSetting.DimLineStyle</li><li>OrdinateDimensionSetting.TextOrientation</li><li>OrdinateDimensionSetting.TextPosition</li><li>OrdinateDimensionSetting.OriginVisibility</li><li>OrdinateDimensionSetting.OriginTickMarkId</li></ul><p>The following new methods in DimensionType allow access to the OrdinateDimensionSetting:</p><ul><li> DimensionType.GetOrdinateDimensionSetting()</li><li> DimensionType.SetOrdinateDimensionSetting()</li></ul><h2 id="RevitAPIChanges2018-SpatialElementTagAPIadditions">SpatialElementTag API additions</h2><p>SpatialElementTag is the base element for Room, Area and Space tag classes.</p><p>The following new properties have been added:</p><ul><li>SpatialElementTag.HasElbow - Identifies if the tag's leader has an elbow point or not.</li><li>SpatialElementTag.TagText - The text displayed by the tag. </li></ul><h2 id="RevitAPIChanges2018-GeometryAPIadditions">Geometry API additions</h2><h3 id="RevitAPIChanges2018-SurfaceandFaceAPI">Surface and Face API</h3><p>The new method:</p><ul><li>Face.GetSurface()</li></ul><p>returns a copy of the Face's surface.</p><p>In order to correctly leverage this information, the following properties:</p><ul><li>Face.OrientationMatchesSurfaceOrientation</li><li>Surface.OrientationMatchesParametricOrientation</li></ul><p>identify whether the face's orientation matches the surface orientation, and whether the surface orientation is the same as or opposite to its parametric orientation.</p><h3 id="RevitAPIChanges2018-RevolvedSurfaceAPI">RevolvedSurface API</h3><p>The new method:</p><ul><li>RevolvedSurface.GetProfileCurveInWorldCoordinates()</li></ul><p>returns a copy of the profile curve expressed in the world coordinate system.</p><h3 id="RevitAPIChanges2018-RuledSurfaceAPI">RuledSurface API</h3><p>The newly added methods:</p><ul><li><p><span>RuledSurface.</span>HasFirstProfilePoint()</p></li><li><p><span>RuledSurface.</span>HasSecondProfilePoint()</p></li></ul><p>check if a point was used to define one of the surface profiles. </p><h2 id="RevitAPIChanges2018-LevelAPIaddition">Level API addition</h2><p>The new method:</p><ul><li>Level.FindAssociatedPlanViewId()</li></ul><p>finds the id of the first available associated floor or structural plan view associated with this level. If there are multiple associated views, Revit will return the first one it finds. </p><h2 id="RevitAPIChanges2018-DockableFrameAPIAdditions">Dockable Frame API Additions</h2><p>Custom Dockable Panes now support the ability for display of dynamic UI elements, such as web browser controls.  This capability should be used in cases where the UI for the pane (layout, buttons etc.) changes dynamically during the lifetime of the Revit session. To use this, implement the new interface:</p><ul><li>IFrameworkElementCreator</li></ul><p>with a method:</p><ul><li>IFrameworkElementCreator.CreateFrameworkElement()</li></ul><p>that constructs and returns the WPF Framework element to embedded in the Revit dockable pane.</p><p>The new members:</p><ul><li>DockablePaneProviderData.GetFrameworkElement()</li><li>DockablePaneProviderData.FrameworkElementCreator</li></ul><p>provide the ability for the application to deliver a dynamic framework element to the dockable pane.  </p><p>The property:</p><ul><li>DockablePaneProviderData.FrameworkElement</li></ul><p>is now allowed to be null, in situations where the FrameworkElement will be dynamically created.</p><h2 id="RevitAPIChanges2018-DirectContext3Dfordisplayofexternallymanaged3DgraphicsinRevit">DirectContext3D for display of externally managed 3D graphics in Revit</h2><p>DirectContext3D is an API for displaying external graphics in the context of a Revit model. The API provides a more connected experience to users who can benefit from the ability to display graphics based on geometry that is either difficult or costly to fully import into Revit.</p><p>An external plugin can use DirectContext3D API to render geometry by encoding it inside pairs of vertex and index buffers. The communication between Revit and the plugin is accomplished with the use of the External Service Framework (ESF). Revit’s rendering pipeline asks registered servers of the DirectContext3D service to provide the geometry for rendering. Revit informs the plugin about certain rendering state, such as the display style and whether the current rendering pass is for transparent objects. The plugin also communicates certain information to Revit, such as the bounding box of the geometry to be rendered.</p><p>The following list contains the major added classes and their descriptions:</p><ul><li>DirectContext3D.IDirectContext3DServer - The interface to be implemented by a server of the DirectContext3D external service.</li><li>DirectContext3D.DrawContext - A class that provides drawing functionality for use by DirectContext3D servers.</li><li>DirectContext3D.Vertex - The base class for DirectContext3D vertices.</li><li>DirectContext3D.VertexStream - The base class for DirectContext3D vertex streams, which are used to write vertex data into buffers.</li><li>DirectContext3D.VertexBuffer - A buffer that stores vertex data for rendering.</li><li>DirectContext3D.VertexFormat - A specification of the format of vertex data contained in a piece of geometry.</li><li>DirectContext3D.VertexFormatBits - Vertex format (i.e., the type of data associated with a vertex) represented as a number.</li><li>DirectContext3D.IndexPrimitive - The base class for index buffer primitives.</li><li>DirectContext3D.IndexStream - The base class for DirectContext3D index streams, which are used to write vertex indices into buffers.</li><li>DirectContext3D.IndexBuffer - A buffer that stores vertex indices for rendering.</li><li>DirectContext3D.EffectInstance - An effect instance that controls the appearance of geometry.</li><li>DirectContext3D.PrimitiveType - Type of geometry primitive represented as a number.</li><li>DirectContext3D.ClipPlane - A set of parameters representing a clip plane in DirectContext3D.</li><li>DirectContext3D.ProjectionMethod - The projection method used by a DirectContext3D camera.</li><li>DirectContext3D.Camera - A collection of camera settings for DirectContext3D.</li></ul><h3 id="RevitAPIChanges2018-ViewupdateforDirectContext3D">View update for DirectContext3D</h3><p>The new method:</p><ul><li>UIDocument.UpdateAllOpenViews()</li></ul><p>updates all open views in this document after elements have been changed, deleted, selected or de-selected. Graphics in the views are fully redrawn regardless of which elements have changed.  This function should only rarely be needed, but might be required when working with graphics drawn from outside of Revit's transactions and elements, for example, when using DirectContext3D.</p><p>This function is potentially expensive as many views may be updated at once, including regeneration of view's geometry and redisplay of graphics.  Thus for most situations it is recommended that API applications rely on the Revit application framework to update views more deliberately.</p><h2 id="RevitAPIChanges2018-CoordinationModelelements">Coordination Model elements</h2><p><span style="color: rgb(0,0,0);">Coordination Model elements current can link the graphical contents of Navisworks files and display them in context in the Revit session.  These elements leverage the DirectContext3D framework to handle the display of the external graphics, and are the first example of an element which is designated to contain a link to externally managed DirectContext3D graphics (a &quot;DirectContext3D handle&quot; element).</span></p><p><span style="color: rgb(0,0,0);">There is no current way to create new Coordination Model or DirectContext3D handle elements via the API.   However, you can use the capabilities of the related classes to identify and manipulate these elements. These elements can be accessed from the following new API classes:</span></p><ul><li><span style="color: rgb(0,0,0);">DirectContext3DHandleUtils - provides utilities related to the identification of types and instances which are storing externalized graphics via DirectContext3D</span></li><li><span style="color: rgb(0,0,0);">DirectContext3DHandleSettings - provides access to override settings applied to DirectContext3D handles through the Visibility/Graphics dialog.</span></li><li><span style="color: rgb(0,0,0);">DirectContext3DHandleOverrides - provides access to DirectContext3DHandleSettings that are stored by a given view.</span></li></ul><h2 id="RevitAPIChanges2018-SharedCoordinatesAPIadditions">Shared Coordinates API additions</h2><h3 id="RevitAPIChanges2018-AcquireandPublishcoordinatesAPIadditions">Acquire and Publish coordinates API additions</h3><p>Two new methods allow users to acquire and publish shared coordinates:</p><ul><li>Document.AcquireCoordinates() - Acquires project coordinates from the specified link instance. This method accepts both Revit links (RevitLinkInstance) and DWG links (ImportInstance).</li><li>Document.PublishCoordinates() - Publishes shared coordinates to the specified ProjectLocation. This method works only on Revit links.</li></ul><h3 id="RevitAPIChanges2018-SiteLocationAPIadditions">SiteLocation API additions</h3><p>Two new read-only properties have been added to provide information on the geographic coordinate system of a SiteLocation. The geographic coordinate system is imported from a DWG file from AutoCAD or Civil 3D. If the SiteLocation has geographic coordinate system information, the latitude and longitude of the SiteLocation will be updated automatically <br/>when the model's Survey Point is moved.</p><ul><li>SiteLocation.GeoCoordinateSystemId - Gets a string corresponding to geographic coordinate system ID, such as &quot;AMG-50&quot; or &quot;Beijing1954/a.GK3d-40&quot; for the SiteLocation. The value will be the empty string if there is no coordinate system specified for the SiteLocation. This property is read-only.</li><li>SiteLocation.GeoCoordinateSystemDefinition - Gets an XML string describing the geographic coordinate system. The value will be the empty string if there is no coordinate system specified for the SiteLocation. This property is read-only.</li></ul><p>The new method:</p><ul><li>SiteLocation.IsCompatibleWith()<strong> </strong>- Checks whether the geographic coordinate system of this site is compatible with the given site. </li></ul><h3 id="RevitAPIChanges2018-ProjectLocationAPIadditions">ProjectLocation API additions</h3><p>The new method:</p><ul><li>ProjectLocation.Create()</li></ul><p>creates a new ProjectLocation in the document from the given SiteLocation and with the given name.</p><h3 id="RevitAPIChanges2018-RevitLinkAPIadditions">Revit Link API additions</h3><p>The new method:</p><ul><li>static RevitLinkInstance.Create(ImportPlacement placement)</li></ul><p>creates a new instance of a linked Revit project (RevitLinkType). Instances will be placed origin-to-origin or by shared coordinates according to the input placement type.</p><h2 id="RevitAPIChanges2018-LinkAPIadditions">Link API additions</h2><h3 id="RevitAPIChanges2018-ExternalResourceframeworkadditions">External Resource framework additions</h3><p>IExternalResourceServer can now provide CAD format links, DWF markups, and IFC links. The following new values have been added to ExternalResourceType.BuiltInExternalResourceTypes:</p><ul><li>CADLink</li><li>DWFMarkup</li><li>IFCLink</li></ul><h3 id="RevitAPIChanges2018-CADLinkTypeadditions">CADLinkType additions</h3><p>Several new methods have been added to CADLinkType as part of external resource framework enhancements:</p><ul><li>CADLinkType.Reload() - Reloads a CADLinkType from its current location.</li><li>CADLinkType.Reload(CADLinkOptions options) - Reloads a CADLinkType from its current location, including options to control graphic overrides.</li><li>CADLinkType.LoadFrom(String fileName) - Reloads a CADLinkType from a file on disk.</li><li>CADLinkType.LoadFrom(ExternalResourceReference reference) - Reloads a CADLinkType from an external resource server.</li></ul><h3 id="RevitAPIChanges2018-ImportInstanceadditions">ImportInstance additions</h3><p>Several new methods have been added to create ImportInstance elements, either from an existing link type or a new link type:</p><ul><li>ImportInstance.Create(DWGImportOptions options, String fileName) - Creates a new DWG or DXF type and instance from a file on disk.</li><li>ImportInstance.Create(DWGImportOptions options, ExternalResourceReference reference) - Creates a new DWG or DXF type and instance from an external resource location.</li><li>ImportInstance.Create(ElementId typeId) - Creates a new DWG or DXF instance from an existing CADLinkType.</li></ul><p>Methods have also been added to create DGN, SAT, and SKP links from external resource locations.</p><h3 id="RevitAPIChanges2018-IFCLinkAPIadditions">IFC Link API additions</h3><p>The method:</p><ul><li>RevitLinkType.UpdateFromIFC() </li></ul><p>now has a new version that allows for an ExternalResourceReference to specify the IFC file name, instead of a string.</p><h2 id="RevitAPIChanges2018-Worksharedoperationprogresschangedevents">Workshared operation progress changed events</h2><p>Subscribe to the Autodesk.Revit.ApplicationServices.Application.WorksharedOperationProgressChanged event to be notified when progress has changed during Collaboration for Revit's synchronizing.</p><p>This event consists of several phases. Different event arguments are used during each phase.</p><h3 id="RevitAPIChanges2018-WorksharedOperationProgressChangedEventArgs">WorksharedOperationProgressChangedEventArgs</h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.WorksharedOperationProgressChangedEventArgs</li></ul><p>provides a base class for event arguments for worksharing-based progress events.</p><h3 id="RevitAPIChanges2018-DocumentSaveToLocalProgressChangedEventArgs">DocumentSaveToLocalProgressChangedEventArgs </h3><p>The new class:</p><ul><li><p>Autodesk.Revit.DB.Events.DocumentSaveToLocalProgressChangedEventArgs provides information during the save to local phase of the DocumentSynchronizingWithCentralProgressChanged event. </p></li></ul><p>It has the following properties:</p><ul><li>DocumentSaveToLocalProgressChangedEventArgs.Location - Full path of the central model which is to be synchronized.</li><li>DocumentSaveToLocalProgressChangedEventArgs.Status - Gets the API event status, which reflects the current operation execution status.</li><li>DocumentSaveToLocalProgressChangedEventArgs.BeforeSaveToCentral - True if the &quot;save to local&quot; operation is occurring before &quot;save to central&quot;; false if after.</li><li>DocumentSaveToLocalProgressChangedEventArgs.FinishedStreams - The number of streams finished since the last time this event was raised.</li><li>DocumentSaveToLocalProgressChangedEventArgs.TotalStreams - The total expected number of streams to save to local.</li><li>DocumentSaveToLocalProgressChangedEventArgs.SaveToLocalFinished - Indicates if the current &quot;save to local&quot; operation has finished.</li></ul><h3 id="RevitAPIChanges2018-DataTransferProgressChangedEventArgs">DataTransferProgressChangedEventArgs</h3><p>The new class:</p><ul><li><p>Autodesk.Revit.DB.Events.DataTransferProgressChangedEventArgs provides information during the data transferring phase of the WorksharedOperationProgressChanged event. Generally, it is not used directly because It is the base class of Autodesk.Revit.DB.Events.DocumentReloadLatestProgressChangedEventArgs, Autodesk.Revit.DB.Events.DocumentSaveToCentralProgressChangedEventArgs and Autodesk.Revit.DB.Events.CreateRelatedFileProgressChangedEventArgs</p></li></ul><p>It has the following properties:</p><ul><li>DataTransferProgressChangedEventArgs .Location - Full path of the central model which is to be synchronized.</li><li>DataTransferProgressChangedEventArgs .Status - Gets the API event status, which reflects the current operation execution status.</li><li>DataTransferProgressChangedEventArgs .TransferMode - Gets the transfer mode of this data transfer progress. It is Undefined or Download or Upload;</li><li>DataTransferProgressChangedEventArgs .Speed - Gets data transfer speed(bytes/second).</li><li>DataTransferProgressChangedEventArgs .FinishedSize - Gets downloaded or uploaded data size, in bytes, since the last time this event was raised.</li><li>DataTransferProgressChangedEventArgs .TotalSize - Total expected data size to download, in bytes.</li></ul><h3 id="RevitAPIChanges2018-DocumentReloadLatestProgressChangedEventArgs">DocumentReloadLatestProgressChangedEventArgs</h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.DocumentReloadLatestProgressChangedEventArgs provides information during the reload latest phase of the DocumentSynchronizingWithCentralProgressChanged event. </li></ul><p>It has the following properties:</p><ul><li>DocumentReloadLatestProgressChangedEventArgs.Location - The full path of the central model which is to be synchronized.</li><li>DocumentReloadLatestProgressChangedEventArgs.Status - Gets API event status, reflecting the current operation execution status.</li><li>DocumentReloadLatestProgressChangedEventArgs.TransferMode - Returns DataTransferMode.Download.</li><li>DocumentReloadLatestProgressChangedEventArgs.RetryTimes - The number of times Revit has tried to Reload Latest. Its value is '0' at the first time.</li><li>DocumentReloadLatestProgressChangedEventArgs.Speed - Download speed(bytes/second) in this event.</li><li>DocumentReloadLatestProgressChangedEventArgs.FinishedSize - The downloaded data size, in bytes, since the last time this event was raised.</li><li>DocumentReloadLatestProgressChangedEventArgs.TotalSize - Total expected data size to download, in bytes.</li><li>DocumentReloadLatestProgressChangedEventArgs.IsMerging - Indicates if Revit is merging downloaded data.</li><li>DocumentReloadLatestProgressChangedEventArgs.ReloadLatestFinished - Indicates if current 'reload latest' progress is finished or not.</li></ul><h3 id="RevitAPIChanges2018-DocumentSaveToCentralProgressChangedEventArgs">DocumentSaveToCentralProgressChangedEventArgs </h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.DocumentSaveToCentralProgressChangedEventArgs</li></ul><p>provides information during the save to central phase of the DocumentSynchronizingWithCentralProgressChanged event.</p><p>It has the following properties:</p><ul><li>DocumentSaveToCentralProgressChangedEventArgs.Location - Full path of the central model which is to be synchronized.</li><li>DocumentSaveToCentralProgressChangedEventArgs.Status - Gets API event status, reflecting the current operation execution status.</li><li>DocumentSaveToCentralProgressChangedEventArgs.TransferMode - Returns DataTransferMode.Upload.</li><li>DocumentSaveToCentralProgressChangedEventArgs.RetryTimes - The number of times Revit has tried to Save to Central.&quot; Its value is '0' at the first time.</li><li>DocumentSaveToCentralProgressChangedEventArgs.Speed - Upload speed(bytes/second) of saving to central.</li><li>DocumentSaveToCentralProgressChangedEventArgs.FinishedSize - The uploaded data size, in bytes, since the last time this event was raised.</li><li>DocumentSaveToCentralProgressChangedEventArgs.TotalSize - Total expected uploaded data size to save to central, in bytes.</li><li>DocumentSaveToCentralProgressChangedEventArgs.SaveToCentralFinished - Indicates if current 'save to central' is finished or not.</li><li>DocumentSaveToCentralProgressChangedEventArgs.FailureDueToConflicts - Indicates the 'save to central' failure is caused by submission, that is because another user finished saving to central first.</li></ul><h3 id="RevitAPIChanges2018-CreateRelatedFileProgressChangedEventArgs">CreateRelatedFileProgressChangedEventArgs</h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.CreateRelatedFileProgressChangedEventArgs</li></ul><p>provides information about the creation of related files when Collaboration for Revit models are being opened.</p><p>It has the following properties:</p><ul><li>CreateRelatedFileProgressChangedEventArgs.Location - Full path of the model which is to be created related file.</li><li>CreateRelatedFileProgressChangedEventArgs.Status - Gets API event status, reflecting the current operation execution status.</li><li>CreateRelatedFileProgressChangedEventArgs.TransferMode - Returns DataTransferMode.Download.</li><li>CreateRelatedFileProgressChangedEventArgs.CreatingCloudSharedLocal - Indicates if it is creating cloud shared local model.</li><li>CreateRelatedFileProgressChangedEventArgs.DownloadFinished - Indicates if all data downloads are finished or not.</li><li>CreateRelatedFileProgressChangedEventArgs.Speed - Download speed(bytes/second) in this event.</li><li>CreateRelatedFileProgressChangedEventArgs.FinishedSize - The downloaded data size, in bytes, since the last time this event was raised.</li><li>CreateRelatedFileProgressChangedEventArgs.TotalSize - Total expected data size to download, in bytes.</li><li>CreateRelatedFileProgressChangedEventArgs.FullDownload - Indicates if download the full data of the document, which will take longer than subsequent downloads. </li></ul><h2 id="RevitAPIChanges2018-Eventsrelatedtolinkedresources">Events related to linked resources</h2><p>Subscribe to the events:</p><ul><li>Autodesk.Revit.ApplicationServices.Application.LinkedResourceOpening</li><li>Autodesk.Revit.ApplicationServices.ControlledApplication.LinkedResourceOpening</li><li>Autodesk.Revit.ApplicationServices.Application.LinkedResourceOpened</li><li>Autodesk.Revit.ApplicationServices.ControlledApplication.LinkedResourceOpened</li></ul><p>to be notified when Revit is just about to open, or has just opened, a linked resource.  This event supports linked resources of the following types : Revit; IFC; CAD (DWG, DXF, DGN, SAT).</p><p>This event will not be raised if there are no updates for linked CAD or IFC resources.  The linked resource cannot be modified during these events.</p><h3 id="RevitAPIChanges2018-LinkedResourceOpeningEventArgs">LinkedResourceOpeningEventArgs</h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.LinkedResourceOpeningEventArgs </li></ul><p>provides information when Revit is just about to open a linked resource.</p><p><span style="color: rgb(0,0,0);">It has the following properties:</span></p><ul><li><span style="color: rgb(0,0,0);">LinkedResourceOpeningEventArgs.ResourceType - Linked resource type.<br class="_mce_tagged_br"/> </span></li><li><span style="color: rgb(0,0,0);"> <span style="color: rgb(0,0,0);">LinkedResourceOpeningEventArgs.</span>LinkedResourcePathName - The linked resource name to open.</span></li></ul><h3 id="RevitAPIChanges2018-LinkedResourceOpenedEventArgs">LinkedResourceOpenedEventArgs</h3><p>The new class:</p><ul><li>Autodesk.Revit.DB.Events.<span style="color: rgb(0,0,0);">LinkedResourceOpenedEventArgs </span></li></ul><p><span style="color: rgb(0,0,0);">provides information when Revit finishes opening a linked resource.</span></p><p><span style="color: rgb(0,0,0);">It has the following properties:</span></p><ul><li><span style="color: rgb(0,0,0);"> <span style="color: rgb(0,0,0);">LinkedResourceOpenedEventArgs</span>.ResourceType - Linked resource type.<br class="_mce_tagged_br"/> </span></li><li><span style="color: rgb(0,0,0);"> <span style="color: rgb(0,0,0);">LinkedResourceOpenedEventArgs</span>.LinkedResourcePathName - Opened linked resource name.</span></li></ul><h2 id="RevitAPIChanges2018-EventsrelatedtoparallelViewExport">Events related to parallel View Export</h2><p>When exporting multiple views to DWF or DWFx format, Revit uses background processes to compute the exported output of several views in parallel. Two events are now available on the Application class to receive progress updates during a parallel export operation:</p><ul><li>Application.ViewExporting - This event is raised when Revit is just about to export a view of the document.</li><li>Application.ViewExported - This event is raised immediately after Revit has finished exporting a view of the document.</li></ul><p>These two events are raised only during accelerated export jobs, in which views are exported in parallel using a background process. Accelerated export only occurs when exporting to DWF formats and not combining views into a single file. </p><h2 id="RevitAPIChanges2018-DWGexportAPIadditions">DWG export API additions</h2><p>The new enumerated value:</p><ul><li>ExportColorMode.TrueColorPerView</li></ul><p>specified an export where all colors from the Revit project will be exported as 24-bit RGB values as specified in view (where ExportColorMode.TrueColor indicates that all colors from the Revit project will be exported as 24-bit RGB values as specified in object styles)</p><p>The new properties:</p><ul><li>ACADExportOptions.UseHatchBackgroundColor</li><li>ACADExportOptions.HatchBackgroundColor</li></ul><p>allow assignment of a color that will be set as hatch background color on the exported hatch. </p><h3 id="RevitAPIChanges2018-ExportDWGSettingsAPIadditions">ExportDWGSettings API additions</h3><p>Two new methods have been added to ExportDWGSettings:</p><ul><li>ExportDWGSettings.FindByName() - Returns the pre-defined DWG export settings in the given document with the specified name.</li><li>ExportDWGSettings.GetActivePredefinedSettings() - Returns the active DWG export settings in the given document.</li></ul><p>Note that these functions cannot return in-session settings. To access the in-session settings, save them with a name.</p><h2 id="RevitAPIChanges2018-PartAPIadditions">Part API additions</h2><p>The new methods:</p><ul><li>Part.ResetFaceOffset()</li><li>Part.GetFaceOffset()</li></ul><p>provide further capabilities to access and manipulate the offset applied to a given face of a Part element.</p><h2 id="RevitAPIChanges2018-FreeformRebarAPIadditions">Freeform Rebar API additions</h2><p>The new methods:</p><ul><li>Rebar.CreateFreeForm(Document, RebarBarType, Element, IList&lt;IList&lt;Curve&gt;&gt;, out RebarFreeFormValidationResult)</li><li>Rebar.CreateFreeForm(Document, RebarBarType, Element, IList&lt;CurveLoop&gt;, out RebarFreeFormValidationResult)</li></ul><p>Create a freeform rebar instance where bars are created along the path of the input curves.  Constraints cannot later be added to this rebar.</p><p>Freeform rebar instances have properties accessible from the RebarFreeFormAccessor class, which can be obtained from:</p><ul><li>Rebar.GetFreeFormAccessor()</li></ul><p>The new members of this accessor class allow you to change the bar curves only for unconstrained rebar:</p><ul><li>RebarFreeFormAccessor.SetCurves()</li><li>RebarFreeFormAccessor.IsUnconstrained()</li></ul><p>They also provide access to layout, distribution path and hook properties of the rebar, if applicable:</p><ul><li>RebarFreeFormAccessor.SetLayoutAsSingle()</li><li>RebarFreeFormAccessor.SetLayoutAsNumberWithSpacing()</li><li>RebarFreeFormAccessor.SetLayoutAsFixedNumber()</li><li>RebarFreeFormAccessor.SetLayoutAsMaximumSpacing()</li><li>RebarFreeFormAccessor.SetLayoutAsMinimumClearSpacing()</li><li>RebarFreeFormAccessor.GetCustomDistributionPath()</li><li>RebarFreeFormAccessor.SetHookPlaneNormalForBarIdx()</li><li>RebarFreeFormAccessor.GetHookPlaneNormalForBarIdx()</li><li>RebarFreeFormAccessor.SetHookOrientationAngle()</li><li>RebarFreeFormAccessor.GetHookOrientationAngle()</li></ul><h2 id="RevitAPIChanges2018-CustomServiceforFreeformRebarDefinition">Custom Service for Freeform Rebar Definition</h2><p>The new interface class:</p><ul><li>IRebarUpdateServer</li></ul><p> represents an interface that can be overridden to drive the generation and update of freeform rebar geometry.  The interface features several methods:</p><ul><li>IRebarUpdateServer.GetCustomHandles() - This method should define all handles that the Rebar instance will have. This method is called when the Rebar is created.</li><li>IRebarUpdateServer.GetCustomHandleName() - This function should return the user-visible name of the handle.  This function is called during an editing operation for the Rebar constraints when the mouse is over a handle</li><li>IRebarUpdateServer.GenerateCurves() - This function should calculate the bar geometry. </li><li>IRebarUpdateServer.TrimExtendCurves() - This function should calculate the trim and/or extension of the curves that were obtained from calling GenerateCurves(), as well as to assign new constraints for the start and end handles.</li><li>IRebarUpdateServer.GetHandlesPosition() - This function is supposed to provide the positions of handles defined in GetCustomHandles(). These positions will be shown on screen when the bar constraints are edited.<br/>If a position for a handle isn't provided, that handle will not be represented on screen while edit constraints.</li></ul><p>The interfaces methods each provide an input argument which carries data needed for the calculation, as well as the results.  These new argument classes are:</p><ul><li>RebarHandlesData</li><li>RebarHandleNameData</li><li>RebarUpdateCurvesData</li><li>RebarCurvesData</li><li>RebarTrimExtendData</li><li>RebarHandlePositionData</li></ul><p>You can programmatically create a freeform Rebar whose geometry and constraints are governed by the external service using:</p><ul><li>Rebar.Create(Document, GUID, RebarBarType, Element)</li></ul><p>You can convert a FreeForm rebar governed by an external service to an unconstrained element using:</p><ul><li>RebarFreeFormAccessor.DisconnectFromServer()</li></ul><p>In order to access and modify constraints associated to any custom handles associated to the service-driven freeform Rebar, you may use the members of the RebarConstrainedHandle class:</p><ul><li>RebarConstrainedHandle.IsCustomHandle()</li><li>RebarConstrainedHandle.HandleName</li><li>RebarConstrainedHandle.GetCustomHandleTag()</li></ul><p>and use the new members of RebarConstraint and RebarConstraintsManager:</p><ul><li>RebarConstraint.Create(RebarConstrainedHandle, IList&lt;Reference&gt;, bool, double)</li><li>RebarConstraint.ReplaceReferenceTargets()</li><li>RebarConstraint.NumberOfTargets</li><li>RebarConstraint.GetTargetElement()</li><li>RebarConstraint.GetRebarConstraintTargetHostFaceType()</li><li>RebarConstraint.GetTargetHostFaceAndTransform()</li><li>RebarConstraint.GetTargetCoverType()</li><li>RebarConstraint.GetTargetHostFaceReference()</li><li>RebarConstraint.GetCustomHandleTag()</li><li>RebarConstraintsManager.GetAllHandles()</li><li>RebarConstraintsManager.AllowConstraintTargets()</li></ul><h2 id="RevitAPIChanges2018-HVACSpaceTypeandSpaceairventilationAPI">HVACSpaceType and Space air ventilation API</h2><p>The following new properties have been added to Autodesk.Revit.DB.Space:</p><ul><li>Space.SpaceTypeId - Gets or sets the Space type element of the Space.</li><li>Space.OutdoorAirPerPerson - Gets the specified outdoor air per person, in cubic feet per second.</li><li>Space.OutdoorAirPerArea - Gets the specified outdoor air per area, in feet per second. </li><li>Space.AirChangesPerHour - Gets the specified air changes per hour of the space.</li><li>Space.OutdoorAirflow - Gets the outdoor airflow of the Space, in cubic feet per second.</li><li>Space.OutdoorAirFlowStandard - Gets the outdoor air flow standard of the space.</li></ul><h2 id="RevitAPIChanges2018-EnergyAnalysisAPIadditions">Energy Analysis API additions</h2><p>Energy Analysis API additions</p><p>Several new classes have been added to allow better control over spaces when doing energy analysis.</p><p>The new class:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadType</li></ul><p>is the base class for HVACLoadSpaceType and HVACLoadBuildingType.</p><p>It has the following properties:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadType.AirChangesPerHour - The air changes per hour. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.AreaPerPerson - The area per person. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.LatentHeatGainPerPerson -  The latent heat gain per person. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.LightingLoadDensity - The lighting load density. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.OutdoorAirPerArea -  The outdoor air per area. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.OutdoorAirPerPerson - The outdoor air per person. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.OutdoorAirFlowStandard-The outdoor airflow standard.</li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.PlenumLighting - The percentage of plenum lighting contribution. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.PowerLoadDensity - The power load density. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadType.SensibleHeatGainPerPerson - The sensible heat gain per person. </li></ul><p>The new class:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType</li></ul><p>allows users to set the usage type associated with the space, such as “Dining Area” or “Lobby”.</p><p>It has the following methods and properties:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType.Create() </li><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType.IsNameUnique(String) </li><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType.IsNameUnique(Document, String)   </li><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType.IsPlenum </li><li>Autodesk.Revit.DB.Analysis.HVACLoadSpaceType.SpaceTypeName </li></ul><p>The new class:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType</li></ul><p>allows users to set the energy analysis usage type associated with a building, such as “Museum” or “Office”.</p><p>It has the following methods and properties:</p><ul><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.Create()  </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.IsNameUnique(String)   </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.IsNameUnique(Document, String)</li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.BuildingTypeName  </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.OpeningTime </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.ClosingTime </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.IsValidTime() - Checks if the string can be parsed to a valid time for opening time and closing time. A valid string can be &quot;16:30&quot; or &quot;4:30 PM&quot;. </li><li>Autodesk.Revit.DB.Analysis.HVACLoadBuildingType.UnoccupiedCoolingSetPoint - The unoccupied cooling set point of the building type with unit kelvin (K). </li></ul><p>The new properties:</p><ul><li>Autodesk.Revit.DB.Analysis.MassZone.SpaceTypeId</li><li>Autodesk.Revit.DB.Mechanical.Space.SpaceTypeId</li></ul><p>allow users to set the energy analysis type associated with a space or mass zone.</p><p>Note that these classes are not ElementTypes. They represent properties of a space or building when doing energy analysis, and do not have instances.</p><h2 id="RevitAPIChanges2018-ElectricalAPIadditions">Electrical API additions</h2><h3 id="RevitAPIChanges2018-ElectricalCircuitPathAPI">Electrical Circuit Path API</h3><p>The new API members:</p><ul><li>ElectricalSystem.PathOffset</li><li>ElectricalSystem.HasPathOffset</li><li>ElectricalSystem.HasCustomCircuitPath</li><li>ElectricalSystem.CircuitPathMode</li><li>ElectricalSystem.GetCircuitPath()</li><li>ElectricalSystem.SetCircuitPath()</li><li>ElectricalSystem.IsCircuitPathValid()</li></ul><p>support different options and operations related to electrical circuit paths.</p><h3 id="RevitAPIChanges2018-PanelScheduleViewAPI">PanelScheduleView API</h3><p>The following new methods handle space or spare circuit operations:</p><ul><li>PanelScheduleView.AddSpace() - Add a space at specific cell.</li><li>PanelScheduleView.AddSpare() - Add a spare at specific cell.</li><li>PanelScheduleView.RemoveSpace() - Remove a space at specific cell.</li><li>PanelScheduleView.RemoveSpare() - Remove a spare at specific cell.</li></ul><h2 id="RevitAPIChanges2018-MEPAnalyticalConnectionAPIadditions">MEPAnalyticalConnection API additions </h2><p>Two new classes have been added to allow API users to create analytical connections between elements. The behavior is the same as in Revit's UI.</p><p>The new class:</p><ul><li>MEPAnalyticalConnection</li></ul><p>represents an analytical element that connected mechanical equipment to a piping network. The analytical connection can be used to create a network even if no real pipes are placed yet. It enables the fast establishment of a piping network to analyze the flow and pressure, especially at the early stage of the design process.</p><p>It has the following methods:</p><ul><li>MEPAnalyticalConnection.Create() - Creates a new analytical connection between two connectors.</li><li>MEPAnalyticalConnection.CreateMultipleConnections() - Creates new analytical connections between the equipment connector and the nearest point on the piping network.</li><li>MEPAnalyticalConnection.GetFlow() - Returns the up-to-date flow value. If the network is asynchronously calculated, this method would wait until the calculation is completed.</li></ul><p>The new class:</p><ul><li>MEPAnalyticalConnectionType</li></ul><p>is the type element of an MEPAnalyticalConnection. Its pressure loss value is included in the network critical path calculation.</p><p>It has the following methods and properties:</p><ul><li>MEPAnalyticalConnectionType.Create() - Creates a new analytical connection type with the specified name.</li><li>MEPAnalyticalConnectionType.IsNameUnused() - Checks if the name is already used.</li><li>MEPAnalyticalConnectionType.GetAllTypes() - Returns all types in the document.</li><li>MEPAnalyticalConnectionType.PressureLoss - The pressure loss associated with this type. This property is writable.</li></ul><p>The new property:</p><ul><li>Autodesk.Revit.DB.Plumbing.PipeSettings.AnalysisForClosedLoopHydronicPipingNetworks</li></ul><p>indicates whether to enable analysis for closed loop hydronic piping networks in the background.</p><h2 id="RevitAPIChanges2018-FabricationAPIadditions">Fabrication API additions</h2><h3 id="RevitAPIChanges2018-HangerRodadditions">Hanger Rod additions</h3><p>The following new methods and properties allow better control of hanger rod lengths:</p><ul><li>FabricationRodInfo.GetRodStructureExtension()</li><li>FabricationRodInfo.SetRodStructureExtension() - Sets the extension of the rod into the structure. The rod will remain hosted by structure and have the extension applied on top of any calculated length. This method is only valid for rods which are already hosted by structure.</li><li>FabricationRodInfo.CanRodsBeHosted - Setting this to false disassociates the hanger from any structure and allows the user to manually set lengths. Setting it to true re-enables rods automatically hosting to structure again.</li><li>FabricationRodInfo.GetRodLength() - Gets the current rod length for the specified rod index (including any extension), whether it is hosted or not.</li><li>FabricationRodInfo.SetRodLength() - Sets the current rod length for the specified rod index - but only if hosting is disabled by setting CanRodsBeHosted = false first.</li></ul><p>The new property:</p><ul><li>FabricationPart.HangerRodKit</li></ul><p>allows users to get or set the support rod kit override. This gives the user better control over hanger rod thicknesses.</p><h3 id="RevitAPIChanges2018-Placingandsplittingfabricationparts">Placing and splitting fabrication parts</h3><p>The following methods allow placing and splitting fabrication parts:</p><ul><li>FabricationPart.AlignPartByConnectorToConnector() - Aligns a part by its connector to another connector.</li><li>FabricationPart.AlignPartByInsertionPoint() - Aligns the part by its insertion point to a point and rotation in free space.</li><li>FabricationPart.AlignPartByConnector() - Aligns the part by its connector to a point and rotation in free space.</li><li>FabricationPart.AlignPartByInsertionPointAndCutInToStraight() - Aligns the part by its insertion point to a point and rotation in on a straight.</li><li>FabricationPart.HasNoConnections() - Checks to see if all the part's connectors are open.</li><li>FabricationPart.CanSplitStraight() - Checks to see if a straight can be split into two at a given position.</li><li>FabricationPart.SplitStraight() - Splits a straight at a given position.</li></ul><h3 id="RevitAPIChanges2018-FabricationPartexportadditions">Fabrication Part export additions</h3><p>The new method:</p><ul><li>Autodesk.Revit.DB.Fabrication.FabricationUtils.ExportToPCF()</li></ul><p>exports Fabrication parts to PCF format.</p><p>The new property:</p><ul><li>FabricationPart.SpoolName</li></ul><p>allows control over Spool names in PCF output.</p><h3 id="RevitAPIChanges2018-FabricationPartstatusadditions">Fabrication Part status additions</h3><p>Two properties were added to FabricationPart to allow the user to query and set the part fabrication status field:</p><ul><li>FabricationPart.PartStatus - Queries or changes the part fabrication status field current value. Setting the value will track when it was changed.</li><li>FabricationPart.PartGuid - Queries the part's fabrication globally unique identifier, as used in applications such as Tracker.</li></ul><h3 id="RevitAPIChanges2018-Fabricationpartcomparison">Fabrication part comparison</h3><p>The new method:</p><ul><li>FabricationPart.IsSameAs()</li></ul><p>compares basic dimensional information of two fabrication parts but also allows the user to specify additional fabrication data to ignore. This allows users to compare parts including fabrication data not exposed in Revit.</p><h3 id="RevitAPIChanges2018-FabricationPartancillaryusageadditions">Fabrication Part ancillary usage additions</h3><p>The new method:</p><ul><li>FabricationPart.GetPartAncillaryUsage()</li></ul><p>gets a list of FabricationAncillaryUsage structures that lists the ancillaries that the fabrication part uses. This method can be used to populate cut lists and procure ancillaries needed to fabricate and install the fabrication part.</p><p>The new class:</p><ul><li>FabricationAncillaryUsage</li></ul><p>contains the ancillary usage data. It has the following read-only properties:</p><ul><li>FabricationAncillaryUsage.Type - A new enumerated type FabricationAncillaryType which describes what kind of ancillary it is (eg. a fixing, airturn vane or support material).</li><li>FabricationAncillaryUsage.UsageType - a new enumerated type FabricationAncillaryUsageType describing the usage of the ancillary (eg. in a support, connector or airturn).</li><li>FabricationAncillaryUsage.AncillaryId - the ancillary database identifier as listed by FabricationConfiguration.GetAncillaries().</li><li>FabricationAncillaryUsage.Length</li><li>FabricationAncillaryUsage.AncillaryWidthOrDiameter - The width / diameter of the ancillary (eg. rod thickness).</li><li>FabricationAncillaryUsage.AncillaryDepth</li><li>FabricationAncillaryUsage.Quantity</li><li>FabricationAncillaryUsage.ProductCode</li></ul><h3 id="RevitAPIChanges2018-FabricationPartcustomdataadditions">Fabrication Part custom data additions</h3><p>The following methods allow access to Fabrication Part custom data defined per part. This can be used for querying and changing values:</p><ul><li>FabricationPart.HasCustomData() - Queries if a part has a certain optional custom data.</li><li>FabricationPart.Get/SetPartCustomDataText/Integer/Real() - Gets or sets the fabrication part's custom data.</li><li>FabricationPart.Add/RemovePartCustomData() - Adds or removes optional custom data on fabrication parts.</li></ul><h3 id="RevitAPIChanges2018-FabricationConfigurationadditions">FabricationConfiguration additions</h3><p>Mew methods have been added to access fabrication data defined by the currently loaded fabrication configuration. These can be used to query what fabrication data is available for fabrication parts to use:</p><ul><li>FabricationConfiguration.GetAllDampers()</li><li>FabricationConfiguration.GetDamperName()</li><li>FabricationConfiguration.GetAncillaries() - list all ancillary identifiers (by enumerated type)</li><li>FabricationConfiguration.GetAncillaryName()</li><li>FabricationConfiguration.GetAllPartStatuses()</li><li>FabricationConfiguration.GetPartStatusDescription()</li><li>FabricationConfiguration.GetAllPartCustomData()</li><li>FabricationConfiguration.GetPartCustomDataName()</li><li>FabricationConfiguration.GetPartCustomDataType()</li></ul><h3 id="RevitAPIChanges2018-Routingexclusionsadditions">Routing exclusions additions</h3><p>The following methods allow users to override routing exclusions:</p><ul><li>FabricationService.IsGroupExcluded() - Gets whether a service group is excluded from routing.</li><li>FabricationService.SetServiceGroupExclusions() - Sets the service group exclusions.</li><li>FabricationService.ResetServiceExclusionOverrides() - Resets the overridden service group and button exclusions back to default.</li><li>FabricationService.OverrideServiceButtonExclusion() - Overrides the default service button exclusions.</li><li>FabricationServiceButton.IsExcluded() - Gets if the service button is excluded from routing.</li></ul><h3 id="RevitAPIChanges2018-FabricationServiceButtonaddition">FabricationServiceButton addition</h3><p>The new property:</p><ul><li>FabricationServiceButton.IsStraight</li></ul><p>returns true if all conditions of the fabrication service button are straight pieces. This indicates the button is suitable for use with multi-point routing, among other uses.</p>
<script type="text/javascript">
<!--
h3m_fix();
-->
</script>

</body>

</html>