<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="save" content="history" />
<title>Create Method (Document, ElementId, ElementId, Connector, Connector)</title><meta name="Language" content="en-us" /><meta name="Description" content="Creates a new duct that connects to two connectors." /><link rel="stylesheet" type="text/css" href="styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="HxLink.css" /><script type="text/javascript" src="scripts/EventUtilities.js"> </script>
<script type="text/javascript" src="scripts/SplitScreen.js"> </script>
<script type="text/javascript" src="scripts/Dropdown.js"> </script>
<script type="text/javascript" src="scripts/script_manifold.js"> </script>
<script type="text/javascript" src="scripts/script_feedBack.js"> </script>
<script type="text/javascript" src="scripts/CheckboxMenu.js"> </script>
<script type="text/javascript" src="scripts/CommonUtilities.js"> </script>
<meta name="container" content="Autodesk.Revit.DB.Mechanical" /><meta name="file" content="d4a329e7-ba33-21dd-c281-2e1fa7ab71c7" /><meta name="guid" content="d4a329e7-ba33-21dd-c281-2e1fa7ab71c7" />

<meta name="Microsoft.Help.Locale" content="en-us" />
<meta name="Microsoft.Help.TopicLocale" content="en-us" />
<meta name="Microsoft.Help.SelfBranded" content="true" />
<meta name="Microsoft.Help.Id" content="M:Autodesk.Revit.DB.Mechanical.Duct.Create(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)" />
<meta name="Microsoft.Help.TocParent" content="Overload:Autodesk.Revit.DB.Mechanical.Duct.Create" />
<meta name="Microsoft.Help.TocOrder" content="0" />
<meta name="Microsoft.Help.Category" content="RevitAPI" />
<meta name="Microsoft.Help.DisplayVersion" content="" />
<meta name="Microsoft.Help.ContentType" content="Reference" />

<xml><MSHelp:Attr Name="AssetID" Value="M:Autodesk.Revit.DB.Mechanical.Duct.Create(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)" /><MSHelp:TOCTitle Title="Create Method (Document, ElementId, ElementId, Connector, Connector)" /><MSHelp:RLTitle Title="Duct.Create Method (Document, ElementId, ElementId, Connector, Connector) (Autodesk.Revit.DB.Mechanical)" /><MSHelp:Keyword Index="A" Term="M:Autodesk.Revit.DB.Mechanical.Duct.Create(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="RevitAPI.dll" /><MSHelp:Attr Name="APIName" Value="Autodesk.Revit.DB.Mechanical.Duct.Create" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="Creates a new duct that connects to two connectors." /><MSHelp:Attr Name="AssemblyVersion" Value="18.0.0.0" /></xml><link type="text/css" rel="stylesheet" href="styles/highlight.css" /><script type="text/javascript" src="scripts/highlight.js"> </script>
<script type="text/javascript" src="h3m.js"></script>
</head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img id="toggleAllImage" class="toggleAll" src="icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onclick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onclick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onclick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2018 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Duct<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Create Method (Document, ElementId, ElementId, Connector, Connector)</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Mechanical.Duct">Duct Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2018 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary">
   Creates a new duct that connects to two connectors.
</div><p /><b>Namespace:</b> <a href="ms-xhelp:///?Id=N:Autodesk.Revit.DB.Mechanical">Autodesk.Revit.DB.Mechanical</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 18.0.0.0 (18.0.0.0)<br /><b>Since:</b> 
   2017
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codelanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Mechanical.Duct">Duct</a> <span class="identifier">Create</span>(
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Document">Document</a> <span class="parameter">document</span>,
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a> <span class="parameter">ductTypeId</span>,
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a> <span class="parameter">levelId</span>,
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a> <span class="parameter">startConnector</span>,
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a> <span class="parameter">endConnector</span>
)</pre></td></tr></table></span><span codelanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Document">Document</a>, _
	<span class="parameter">ductTypeId</span> <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a>, _
	<span class="parameter">levelId</span> <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a>, _
	<span class="parameter">startConnector</span> <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a>, _
	<span class="parameter">endConnector</span> <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a> _
) <span class="keyword">As</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Mechanical.Duct">Duct</a></pre></td></tr></table></span><span codelanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Mechanical.Duct">Duct</a>^ <span class="identifier">Create</span>(
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Document">Document</a>^ <span class="parameter">document</span>, 
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a>^ <span class="parameter">ductTypeId</span>, 
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">ElementId</a>^ <span class="parameter">levelId</span>, 
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a>^ <span class="parameter">startConnector</span>, 
	<a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Connector</a>^ <span class="parameter">endConnector</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramname="document"><dt><span class="parameter">document</span></dt><dd>Type: <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Document">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Document</a><br />
   The document.
</dd></dl><dl paramname="ductTypeId"><dt><span class="parameter">ductTypeId</span></dt><dd>Type: <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ElementId</a><br />
   The ElementId of the new duct type.
</dd></dl><dl paramname="levelId"><dt><span class="parameter">levelId</span></dt><dd>Type: <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.ElementId">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ElementId</a><br />
   The level ElementId for the new duct.
</dd></dl><dl paramname="startConnector"><dt><span class="parameter">startConnector</span></dt><dd>Type: <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Connector</a><br />
   The first connector where the new duct starts.
</dd></dl><dl paramname="endConnector"><dt><span class="parameter">endConnector</span></dt><dd>Type: <a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Connector">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Connector</a><br />
   The second point of the new duct.
</dd></dl></div><h4 class="subHeading">Return Value</h4>
   The created duct.
</div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   The new duct will have the same diameter and system type as the start connector. The creation will also connect the new duct
   to two component who owns the specified connectors. If necessary, additional fitting(s) are included to make a valid connection.
   If the new duct can not be connected to the next component (e.g., mismatched direction, no valid fitting, and etc), the new duct
   will still be created at the specified connector position, and an InvalidOperationException is thrown.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codelanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> Duct CreateDuctBetweenConnectors(UIDocument uiDocument)
{
    <span class="highlight-comment">// prior to running this example</span>
    <span class="highlight-comment">// select some mechanical equipment with a supply air connector</span>
    <span class="highlight-comment">// and an elbow duct fitting with a connector in line with that connector</span>
    ElementId levelId = ElementId.InvalidElementId;
    Connector connector1 = <span class="highlight-keyword">null</span>, connector2 = <span class="highlight-keyword">null</span>;
    ConnectorSetIterator csi = <span class="highlight-keyword">null</span>;
    ICollection&lt;ElementId&gt; selectedIds = uiDocument.Selection.GetElementIds();
    Document document = uiDocument.Document;
    <span class="highlight-comment">// First find the selected equipment and get the correct connector</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name == <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;
                    <span class="highlight-keyword">if</span> (conn.Direction == FlowDirectionType.Out &amp;&amp; 
                        conn.DuctSystemType == DuctSystemType.SupplyAir)
                    {
                        connector1 = conn;
                        levelId = family.LevelId;
                        <span class="highlight-keyword">break</span>;
                    }
                }
            }
        }
    }
    <span class="highlight-comment">// next find the second selected item to connect to</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name != <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == connector2)
                    {
                        Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;

                        <span class="highlight-comment">// make sure to choose the connector in line with the first connector</span>
                        <span class="highlight-keyword">if</span> (Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span>)
                        {
                            connector2 = conn;
                            <span class="highlight-keyword">break</span>;
                        }
                    }
                }
            }
        }
    }

    Duct duct = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != connector1 &amp;&amp; <span class="highlight-keyword">null</span> != connector2 &amp;&amp; levelId != ElementId.InvalidElementId)
    {
        <span class="highlight-comment">// find a duct type</span>
        FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(uiDocument.Document);
        collector.OfClass(<span class="highlight-keyword">typeof</span>(DuctType));

        <span class="highlight-comment">// Use Linq query to make sure it is one of the rectangular duct types</span>
        var query = from element <span class="highlight-keyword">in</span> collector
                    where element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) == <span class="highlight-keyword">true</span>
                    select element;

        <span class="highlight-comment">// use extension methods to get first duct type</span>
        DuctType ductType = collector.Cast&lt;DuctType&gt;().First&lt;DuctType&gt;();

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != ductType)
        {
            duct = Duct.Create(document, ductType.Id, levelId, connector1, connector2);
        }
    }

    <span class="highlight-keyword">return</span> duct;
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codelanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> CreateDuctBetweenConnectors(uiDocument <span class="highlight-keyword">As</span> UIDocument) <span class="highlight-keyword">As</span> Duct
   <span class="highlight-comment">' prior to running this example</span>
   <span class="highlight-comment">' select some mechanical equipment with a supply air connector</span>
   <span class="highlight-comment">' and an elbow duct fitting with a connector in line with that connector</span>
   <span class="highlight-keyword">Dim</span> levelId <span class="highlight-keyword">As</span> ElementId = ElementId.InvalidElementId
   <span class="highlight-keyword">Dim</span> connector1 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>, connector2 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">Dim</span> csi <span class="highlight-keyword">As</span> ConnectorSetIterator = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">Dim</span> selectedIds <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> ElementId) = uiDocument.Selection.GetElementIds()
   <span class="highlight-keyword">Dim</span> document <span class="highlight-keyword">As</span> Document = uiDocument.Document
   <span class="highlight-comment">' First find the selected equipment and get the correct connector</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
      <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
         <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
         <span class="highlight-keyword">If</span> family.FamilyCategory.Name = <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
            csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
            <span class="highlight-keyword">While</span> csi.MoveNext()
               <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)
               <span class="highlight-keyword">If</span> conn.Direction = FlowDirectionType.Out <span class="highlight-keyword">AndAlso</span> conn.DuctSystemType = DuctSystemType.SupplyAir <span class="highlight-keyword">Then</span>
                  levelId = fi.LevelId
                  connector1 = conn
                  <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
               <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
         <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>
   <span class="highlight-comment">' next find the second selected item to connect to</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
      <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
         <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
         <span class="highlight-keyword">If</span> family.FamilyCategory.Name &lt;&gt; <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
            csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
            <span class="highlight-keyword">While</span> csi.MoveNext()
               <span class="highlight-keyword">If</span> connector2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                  <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)

                  <span class="highlight-comment">' make sure to choose the connector in line with the first connector</span>
                  <span class="highlight-keyword">If</span> Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span> <span class="highlight-keyword">Then</span>
                     connector2 = conn
                     <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
                  <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
               <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
         <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   <span class="highlight-keyword">Dim</span> duct <span class="highlight-keyword">As</span> Duct = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">If</span> connector1 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> connector2 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> levelId <span class="highlight-keyword">IsNot</span> ElementId.InvalidElementId <span class="highlight-keyword">Then</span>
      <span class="highlight-comment">' find a duct type</span>
      <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(uiDocument.Document)
      collector.OfClass(<span class="highlight-keyword">GetType</span>(DuctType))

      <span class="highlight-comment">' Use Linq query to make sure it is one of the rectangular duct types</span>
      <span class="highlight-keyword">Dim</span> query <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
      query = From element <span class="highlight-keyword">In</span> collector _
              Where element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) = <span class="highlight-keyword">True</span> _
              <span class="highlight-keyword">Select</span> element

      <span class="highlight-comment">' use extension methods to get first duct type</span>
      <span class="highlight-keyword">Dim</span> ductType <span class="highlight-keyword">As</span> DuctType = collector.Cast(<span class="highlight-keyword">Of</span> DuctType)().First()

      <span class="highlight-keyword">If</span> ductType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
         duct = duct.Create(document, ductType.Id, levelId, connector1, connector2)
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-keyword">Return</span> duct
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="ms-xhelp:///?Id=T:Autodesk.Revit.Exceptions.ArgumentException">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentException</a></td><td>
   The duct type ductTypeId is not valid duct type.
   -or-
   The level id levelId is not valid.
   -or-
   The connector's domain is not Domain.â€‹DomainHvac.
   -or-
   The points of startConnector and endConnector are equal.
</td></tr><tr><td><a href="ms-xhelp:///?Id=T:Autodesk.Revit.Exceptions.ArgumentNullException">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
   A non-optional argument was NULL
</td></tr><tr><td><a href="ms-xhelp:///?Id=T:Autodesk.Revit.Exceptions.DisabledDisciplineException">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DisabledDisciplineException</a></td><td>
   None of the following disciplines is enabled: Mechanical Electrical Piping.
</td></tr><tr><td><a href="ms-xhelp:///?Id=T:Autodesk.Revit.Exceptions.InvalidOperationException">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>InvalidOperationException</a></td><td>
   Thrown when the new duct fails to connect with the connector.
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="ms-xhelp:///?Id=T:Autodesk.Revit.DB.Mechanical.Duct">Duct Class</a></div><div class="seeAlsoStyle"><a href="ms-xhelp:///?Id=Overload:Autodesk.Revit.DB.Mechanical.Duct.Create">Create Overload</a></div><div class="seeAlsoStyle"><a href="ms-xhelp:///?Id=N:Autodesk.Revit.DB.Mechanical">Autodesk.Revit.DB.Mechanical Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="icons/footer.gif" alt="Footer image" title="Footer image" /></div><a name="feedback"></a><span id="fb" class="feedbackcss"></span><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:revitapifeedback%40autodesk.com?Subject=Revit 2018 API">Autodesk</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script>
</div></div><script type="text/javascript">
<!--
h3m_fix();
-->
</script>

</body></html>